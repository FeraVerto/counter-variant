{"version":3,"sources":["TunerOfCounter/TunerOfCounter.module.css","App.module.css","Counter/Counter.tsx","Button/Button.tsx","TunerOfCounter/TunerOfCounter.tsx","localStorage/localStorage.ts","redux/counter-reducer.ts","redux/tuner-of-counter-reducer.ts","redux/selectors.ts","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx","Counter/Count.module.css"],"names":["module","exports","Counter","count","maxNumber","className","s","counter","red_number","Button","onClick","disabled","title","TunerOfCounter","value","setNumber","classNameInput","compareNumbers","dispatch","useDispatch","console","log","tuner_item","htmlFor","id","type","onChange","e","inputValue","Number","currentTarget","restoreState","obj","localStorage","getItem","JSON","parse","initialState","countAC","startNumber","setDisabledAC","max","min","setMaxNumberAC","setStartNumberAC","state","tuner","tunerOfCounter","App","countState","useSelector","tunerState","useState","input","classMax","setClassMax","classStart","setClassStart","error","compare","start","tuner_block","button_block","setItem","stringify","saveState","count_block","newValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,WAAa,qC,kBCA/BD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,YAAc,yBAAyB,QAAU,qBAAqB,aAAe,0BAA0B,YAAc,yBAAyB,MAAQ,mBAAmB,MAAQ,mBAAmB,MAAQ,qB,uJCQtP,SAASC,EAAT,GAAwD,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,UAC5B,OAAO,qBAAKC,UAAWC,IAAEC,QAAlB,SACH,qBAAMF,UAAWF,IAAUC,GAAuB,IAAVD,EAAvB,UAAwCG,IAAEE,YAAe,GAA1E,SACG,4BAAIL,QCKAM,MARf,YAA8D,IAA7CC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAEhC,OACI,wBAAQF,QAASA,EACTC,SAAUA,EADlB,SAC6BC,K,wBCA9B,SAASC,EAAT,GAAoG,IAA3EC,EAA0E,EAA1EA,MAAOC,EAAmE,EAAnEA,UAAWH,EAAwD,EAAxDA,MAAOI,EAAiD,EAAjDA,eAAgBC,EAAiC,EAAjCA,eACjEC,EAAWC,cAaf,OADAC,QAAQC,IAAIP,GAER,sBAAKT,UAAWC,IAAEgB,WAAlB,UACI,uBAAOC,QAAQ,IAAf,SACKX,IAEL,uBACIE,MAAOA,EACPT,UAAWW,EACXQ,GAAG,IACHC,KAAK,SACLC,SArBa,SAACC,GAEtB,IAAIC,EAAaC,OAAOF,EAAEG,cAAchB,OAExCI,EAASH,EAAUa,GAAc,KAEjCX,EAAeW,SCtBhB,IAQMG,EAAe,WACxB,IAAIC,EAAMC,aAAaC,QAAQ,WAC/B,OAAOF,EAAMG,KAAKC,MAAMJ,GAAO,CAAC,IAAO,GAAI,IAAO,K,OCJlDK,EAAiC,CACjClC,MAAO,+BACPQ,UAAU,GA4BD2B,EAAU,SAACC,GAAD,MAAmC,CACtDd,KAAM,YAAac,gBAGVC,EAAgB,SAAC7B,GAAD,MAAwB,CACjDc,KAAM,WAAYd,aCxBlB0B,EAAiC,CACjCjC,UAAW2B,IAAeU,IAC1BF,YAAaR,IAAeW,KAkBnBC,EAAiB,SAACvC,GAAD,MAAiC,CAC3DqB,KAAM,iBAAkBrB,cAGfwC,EAAmB,SAACL,GAAD,MAAmC,CAC/Dd,KAAM,mBAAoBc,gBCxCnBhC,EAAU,SAACsC,GAAD,OAAyBA,EAAMtC,SACzCuC,EAAQ,SAACD,GAAD,OAAyBA,EAAME,gBC8InCC,MApIf,WAGI,IAAIC,EAAaC,YAAY3C,GACzB4C,EAAaD,YAAYJ,GACzB5B,EAAWC,cALJ,EAQmBiC,mBAAQ,UAAY9C,IAAE+C,QARzC,mBAQNC,EARM,KAQIC,EARJ,OASuBH,mBAAQ,UAAY9C,IAAE+C,QAT7C,mBASNG,EATM,KASMC,EATN,KAWPC,EAAK,UAAMpD,IAAEoD,OACbL,EAAK,UAAM/C,IAAE+C,OAGbM,EAAU,SAAClB,EAAsBmB,GAE7BnB,GAAOmB,GAAUnB,EAAM,GAAKmB,EAAQ,GACpC1C,EAASoB,EAAQ,oBACbG,IAAQmB,IAGRH,EAAcC,GACdH,EAAYG,GACZxC,EAASsB,GAAc,OAI3BtB,EAASoB,EAAQ,iCAGjBmB,EAAcJ,GACdE,EAAYF,GAEZnC,EAASsB,GAAc,MAoD/B,OAEI,sBAAKnC,UAAWC,IAAE0C,IAAlB,UAEI,sBAAK3C,UAAWC,IAAEuD,YAAlB,UACI,sBAAKxD,UAAWC,IAAEwC,MAAlB,UAEI,cAACjC,EAAD,CACIC,MAAOqC,EAAW/C,UAClBQ,MAAO,aACPG,UAAW4B,EACX1B,eAzDH,SAACH,GACd6C,EAAQ7C,EAAOqC,EAAWZ,aAEtBzB,EAAQ,GAAKA,GAASqC,EAAWZ,aACjCgB,EAAYG,GACZxC,EAASsB,GAAc,MAEvBe,EAAYF,GACZnC,EAASsB,GAAc,MAkDXxB,eAAgBsC,IAGpB,cAACzC,EAAD,CACIC,MAAOqC,EAAWZ,YAClB3B,MAAO,eACPG,UAAW6B,EACX3B,eArDD,SAACH,GAChB6C,EAAQR,EAAW/C,UAAWU,GAE1BA,EAAQ,GAAKA,GAASqC,EAAW/C,WACjCqD,EAAcC,GACdxC,EAASsB,GAAc,MAEvBiB,EAAcJ,GACdnC,EAASsB,GAAc,MA8CXxB,eAAgBwC,OAIxB,qBAAKnD,UAAWC,IAAEwD,aAAlB,SACI,cAAC,EAAD,CAAQpD,QAjCxB,WACIQ,EAASoB,EAAQa,EAAWZ,cAC5BrB,EAASsB,GAAc,IJ7FN,SAACpC,EAA4BmC,GAClD,IAAIP,EAAM,CACN,IAAO5B,EACP,IAAOmC,GAEXN,aAAa8B,QAAQ,UAAW5B,KAAK6B,UAAUhC,II0F3CiC,CAAUd,EAAW/C,UAAW+C,EAAWZ,cA6BT3B,MAAO,MACrBD,SAAUsC,EAAWtC,gBAKrC,sBAAKN,UAAWC,IAAE4D,YAAlB,UACI,cAAChE,EAAD,CAASC,MAAO8C,EAAW9C,MAAOC,UAAW+C,EAAW/C,UAC/CmC,YAAaY,EAAWZ,cACjC,sBAAKlC,UAAWC,IAAEwD,aAAlB,UACI,cAAC,EAAD,CAAQpD,QAzDxB,WACI,GAAIuC,EAAW9C,MAAQgD,EAAW/C,UAAW,CACzC,IAAI+D,EAAWtC,OAAOoB,EAAW9C,OAAS,EAC1Ce,EAASoB,EAAQ6B,GAAY,OAsDOvD,MAAO,MAC3BD,SAAUsC,EAAW9C,QAAUgD,EAAW/C,WAAsC,OAAzB+C,EAAW/C,YAC1E,cAAC,EAAD,CAAQM,QApDxB,WACQuC,EAAW9C,MAAQgD,EAAWZ,aAC9BrB,EAASoB,EAAQa,EAAWZ,eAkDI3B,MAAO,QACvBD,SAAUsC,EAAW9C,QAAUgD,EAAWZ,aAA0C,OAA3BY,EAAWZ,wBC3HjF6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCHVQ,EAAWC,YAAgB,CAC3BvE,QLgB0B,WAAmF,IAAlFsC,EAAiF,uDAAvDR,EAAc0C,EAAyC,uCAC5G,OAAQA,EAAOtD,MACX,IAAK,YACD,OAAO,2BAAIoB,GAAX,IAAkB1C,MAAO4E,EAAOxC,cAEpC,IAAK,WACD,OAAO,2BAAIM,GAAX,IAAkBlC,SAAUoE,EAAOpE,WAEvC,QACI,OAAOkC,IKxBfE,eJgBiC,WAAmF,IAAlFF,EAAiF,uDAAvDR,EAAc0C,EAAyC,uCACnH,OAAQA,EAAOtD,MACX,IAAK,iBACD,OAAO,2BAAIoB,GAAX,IAAkBzC,UAAW2E,EAAO3E,YAExC,IAAK,mBACD,OAAO,2BAAIyC,GAAX,IAAkBN,YAAawC,EAAOxC,cAE1C,QACI,OAAOM,MIjBRmC,EAAQC,YAAYJ,GCR/BK,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACI,cAAC,EAAD,QAIRK,SAASC,eAAe,SAM1BlB,K,kBCpBApE,EAAOC,QAAU,CAAC,QAAU,uBAAuB,WAAa,6B","file":"static/js/main.737dbf76.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tuner_item\":\"TunerOfCounter_tuner_item__3R6Wk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"count_block\":\"App_count_block__-a2QT\",\"counter\":\"App_counter__o2xHs\",\"button_block\":\"App_button_block__2Qugb\",\"tuner_block\":\"App_tuner_block__2W4u_\",\"tuner\":\"App_tuner__18ufC\",\"input\":\"App_input__2NxBo\",\"error\":\"App_error__1umzI\"};","import React from 'react'\nimport s from './Count.module.css'\n\nexport type CounterPropsType = {\n    count: number | string,\n    maxNumber: number | string,\n    startNumber: number | string\n}\n\nexport function Counter({count, maxNumber}: CounterPropsType) {\n    return <div className={s.counter}>\n        <div  className={count === maxNumber && count !== 0 ? `${s.red_number}` : \"\"}>\n           <p>{count}</p>\n        </div>\n    </div>\n}","import React from 'react';\n\ntype ButtonPropsType = {\n    onClick: () => void,\n    title: string,\n    disabled: boolean\n}\n\n\nfunction Button({onClick, disabled, title}: ButtonPropsType) {\n\n    return (\n        <button onClick={onClick}\n                disabled={disabled}>{title}</button>\n    );\n}\n\nexport default Button;\n","import React, {ChangeEvent} from 'react'\nimport s from \"./TunerOfCounter.module.css\"\nimport {useDispatch} from \"react-redux\";\nimport {log} from \"util\";\n\nexport type TunerOfCounter = {\n    title: string\n    setNumber: (number: number | string) => void\n    compareNumbers: (value: number | string) => void\n    classNameInput: string\n    value: number | string\n}\n\nexport function TunerOfCounter({value, setNumber, title, classNameInput, compareNumbers}: TunerOfCounter) {\n    let dispatch = useDispatch()\n    //Срабатывает при изменениях в инпуте\n    let onChangeInputTuner = (e: ChangeEvent<HTMLInputElement>) => {\n        //достает введенное значение\n        let inputValue = Number(e.currentTarget.value)\n        //и устанавливает его в max или start\n        dispatch(setNumber(inputValue || \"\"))\n        // а так же отправляет его в compareMax или в compareStart\n        compareNumbers(inputValue)\n\n    }\n\n    console.log(value)\n    return (\n        <div className={s.tuner_item}>\n            <label htmlFor=\"1\">\n                {title}\n            </label>\n            <input\n                value={value}\n                className={classNameInput}\n                id=\"1\"\n                type=\"number\"\n                onChange={onChangeInputTuner}/>\n        </div>\n    )\n}\n\n//Функция для сравнения значения из инпута со значением пришедшим из стейта\n//compare - функция для обозначения способа сравнения двух значений\n/*let checkedNumber = (inputValue: number, num: number | string, compare: (a: number, b: number) => boolean) => {\n    let n = Number(num)\n    if (!isNaN(n) && (inputValue < 0 || compare(inputValue,  n))) {\n        props.setCount('Incorrect value')\n    }\n}\ncheckedNumber(inputValue, props.number.max, (a, b) => a>=b)*/","export const saveState = (maxNumber: number | string, startNumber: number | string) => {\n    let obj = {\n        'max': maxNumber,\n        'min': startNumber\n    }\n    localStorage.setItem('counter', JSON.stringify(obj));\n}\n\nexport const restoreState = () => {\n    let obj = localStorage.getItem('counter')\n    return obj ? JSON.parse(obj) : {'max': \"\", 'min': \"\"}\n}","\ntype initialStateType = {\n    count: number | string\n    disabled: boolean\n}\n\nlet initialState: initialStateType = {\n    count: \"enter values and press 'set'\",\n    disabled: false\n}\n\nexport type countActionType = {\n    type: \"SET_COUNT\"\n    startNumber: number | string\n}\n\nexport type setDisabledACType = {\n    type: \"DISABLED\",\n    disabled: boolean\n}\n\nexport type ActionType = countActionType | setDisabledACType\n\nexport const counterReducer = (state: initialStateType = initialState, action: ActionType): initialStateType => {\n    switch (action.type) {\n        case \"SET_COUNT\":\n            return {...state, count: action.startNumber}\n\n        case \"DISABLED\":\n            return {...state, disabled: action.disabled}\n\n        default:\n            return state\n    }\n}\n\nexport const countAC = (startNumber: number | string) => ({\n    type: \"SET_COUNT\", startNumber\n})\n\nexport const setDisabledAC = (disabled: boolean) => ({\n    type: \"DISABLED\", disabled\n})\n\n/*\n\n//Функция для сравнения значения инпутов  max и start\nlet compare = (max: string | number, start: string | number) => {\n\n    if (max <= start || (max < 0 || start < 0)) {\n        setCount('Incorrect value')\n        if (max === start) {\n            //Для одновременного отображения error (border: red) в обоих инпутах\n            //при одинаковых значениях введенных в инпут + disabled  кнопки  set\n            setClassStart(error)\n            setClassMax(error)\n            setDisabled(true)\n        }\n    } else {\n        setCount(\"enter values and press 'set'\")\n        //Как только значения в input будут удовлетворять условиям\n        //присваиваем обычный класс input и раздизебливаем кнопку\n        setClassStart(input)\n        setClassMax(input)\n        setDisabled(false)\n    }\n}\n\n//Функции compareMax и compareStart - обертка для функции compare,\n//которая принимает значение из инпута и отдает для сравнения compare\nlet compareMax = (value: string | number) => {\n    compare(value, startNumber)\n    //Отдельная валидация для инпута \"max value...\"\n    if (value < 0 || value <= startNumber) {\n        setClassMax(error)\n        setDisabled(true)\n    } else {\n        setClassMax(input)\n        setDisabled(false)\n    }\n}\n\nlet compareStart = (value: string | number) => {\n    compare(maxNumber, value)\n    //Отдельная валидация для инпута \"start value...\"\n    if (value < 0 || value >= maxNumber) {\n        setClassStart(error)\n        setDisabled(true)\n    } else {\n        setClassStart(input)\n        setDisabled(false)\n    }\n}*/\n","import {restoreState} from \"../localStorage/localStorage\";\n\nexport type setMaxNumberACType = {\n    type: \"SET_MAX_NUMBER\",\n    maxNumber: number | string\n}\n\nexport type setStartNumberACType = {\n    type: \"SET_START_NUMBER\",\n    startNumber: number | string\n}\n\ntype initialStateType = {\n    maxNumber: number | string\n    startNumber: number | string\n}\n\nlet initialState: initialStateType = {\n    maxNumber: restoreState().max,\n    startNumber: restoreState().min\n}\n\nexport type ActionType = setMaxNumberACType | setStartNumberACType\n\nexport const tunerOfCounterReducer = (state: initialStateType = initialState, action: ActionType): initialStateType => {\n    switch (action.type) {\n        case \"SET_MAX_NUMBER\":\n            return {...state, maxNumber: action.maxNumber}\n\n        case \"SET_START_NUMBER\":\n            return {...state, startNumber: action.startNumber}\n\n        default:\n            return state\n    }\n}\n\nexport const setMaxNumberAC = (maxNumber: number | string) => ({\n    type: \"SET_MAX_NUMBER\", maxNumber\n})\n\nexport const setStartNumberAC = (startNumber: number | string) => ({\n    type: \"SET_START_NUMBER\", startNumber\n})","import {AppStateType} from \"./store\";\n\nexport let counter = (state: AppStateType) => state.counter\nexport let tuner = (state: AppStateType) => state.tunerOfCounter\nexport let stateAll = (state: AppStateType) => state","import React, {useState} from 'react';\nimport s from './App.module.css';\nimport {Counter} from \"./Counter/Counter\";\nimport Button from \"./Button/Button\";\nimport {TunerOfCounter} from \"./TunerOfCounter/TunerOfCounter\";\nimport {saveState} from \"./localStorage/localStorage\";\n\nimport {countAC, setDisabledAC} from \"./redux/counter-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setMaxNumberAC, setStartNumberAC} from \"./redux/tuner-of-counter-reducer\";\nimport {counter, tuner} from \"./redux/selectors\";\n\n\nfunction App() {\n\n\n    let countState = useSelector(counter)\n    let tunerState = useSelector(tuner)\n    let dispatch = useDispatch()\n\n    //стейт для выведения ошибок в каждом инпуте по отдельности\n    let [classMax, setClassMax] = useState<string>(`${s.input}`)\n    let [classStart, setClassStart] = useState<string>(`${s.input}`)\n\n    let error = `${s.error}`\n    let input = `${s.input}`\n\n    //Функция для сравнения значения инпутов  max и start\n    let compare = (max: string | number, start: string | number) => {\n\n        if (max <= start || (max < 0 || start < 0)) {\n            dispatch(countAC('Incorrect value'))\n            if (max === start) {\n                //Для одновременного отображения error (border: red) в обоих инпутах\n                //при одинаковых значениях введенных в инпут + disabled  кнопки  set\n                setClassStart(error)\n                setClassMax(error)\n                dispatch(setDisabledAC(true))\n            }\n        } else {\n            //setCount(\"enter values and press 'set'\")\n            dispatch(countAC(\"enter values and press 'set'\"))\n            //Как только значения в input будут удовлетворять условиям\n            //присваиваем обычный класс input и раздизебливаем кнопку\n            setClassStart(input)\n            setClassMax(input)\n            //setDisabled(false)\n            dispatch(setDisabledAC(false))\n        }\n    }\n\n    //Функции compareMax и compareStart - обертка для функции compare,\n    //которая принимает значение из инпута и отдает для сравнения compare\n    let compareMax = (value: string | number) => {\n        compare(value, tunerState.startNumber)\n        //Отдельная валидация для инпута \"max value...\"\n        if (value < 0 || value <= tunerState.startNumber) {\n            setClassMax(error)\n            dispatch(setDisabledAC(true))\n        } else {\n            setClassMax(input)\n            dispatch(setDisabledAC(false))\n        }\n    }\n\n    let compareStart = (value: string | number) => {\n        compare(tunerState.maxNumber, value)\n        //Отдельная валидация для инпута \"start value...\"\n        if (value < 0 || value >= tunerState.maxNumber) {\n            setClassStart(error)\n            dispatch(setDisabledAC(true))\n        } else {\n            setClassStart(input)\n            dispatch(setDisabledAC(false))\n        }\n    }\n\n    function increment() {\n        if (countState.count < tunerState.maxNumber) {\n            let newValue = Number(countState.count) + 1\n            dispatch(countAC(newValue || \"\"))\n        }\n    }\n\n    function reset() {\n        if (countState.count > tunerState.startNumber) {\n            dispatch(countAC(tunerState.startNumber))\n        }\n    }\n\n//устанавливаем стартовое значение в counter и раздизэбливаем кнопку set\n    function set() {\n        dispatch(countAC(tunerState.startNumber))\n        dispatch(setDisabledAC(true))\n        //сохраняем в localStorage\n        saveState(tunerState.maxNumber, tunerState.startNumber)\n    }\n\n\n    return (\n\n        <div className={s.App}>\n\n            <div className={s.tuner_block}>\n                <div className={s.tuner}>\n\n                    <TunerOfCounter\n                        value={tunerState.maxNumber}\n                        title={\"max value:\"}\n                        setNumber={setMaxNumberAC}\n                        compareNumbers={compareMax}\n                        classNameInput={classMax}\n                    />\n\n                    <TunerOfCounter\n                        value={tunerState.startNumber}\n                        title={\"start value:\"}\n                        setNumber={setStartNumberAC}\n                        compareNumbers={compareStart}\n                        classNameInput={classStart}\n                    />\n\n                </div>\n                <div className={s.button_block}>\n                    <Button onClick={set} title={\"set\"}\n                            disabled={countState.disabled}\n                    />\n                </div>\n            </div>\n\n            <div className={s.count_block}>\n                <Counter count={countState.count} maxNumber={tunerState.maxNumber}\n                         startNumber={tunerState.startNumber}/>\n                <div className={s.button_block}>\n                    <Button onClick={increment} title={\"inc\"}\n                            disabled={countState.count === tunerState.maxNumber || tunerState.maxNumber === null}/>\n                    <Button onClick={reset} title={\"reset\"}\n                            disabled={countState.count === tunerState.startNumber || tunerState.startNumber === null}/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {createStore} from \"redux\";\nimport {combineReducers} from 'redux'\nimport {counterReducer} from \"./counter-reducer\";\nimport {tunerOfCounterReducer} from \"./tuner-of-counter-reducer\";\n\n\nlet reducers = combineReducers({\n    counter: counterReducer,\n    tunerOfCounter: tunerOfCounterReducer\n})\n\nexport type RootReducerType = typeof reducers\nexport type AppStateType = ReturnType<RootReducerType>\n/*export type StoreType = Store<AppStateType>*/\n\n\nexport let store = createStore(reducers);\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Count_counter__1iNrF\",\"red_number\":\"Count_red_number__3aekN\"};"],"sourceRoot":""}